model CuttingStockColGen	! Name the model

uses "mmxprs"	! include the Xpress solver package
declarations
  Knapsack: mpproblem                  ! Knapsack subproblem
 end-declarations
! knapsack function solves the knapsack problem. You will need to write the content of the function in the later part of the code
! here is the initial declaration of the function
forward function knapsack(y: array(range) of real, W: integer, w: array(range) of integer) : real

! cs1.dat - 8, cs2.dat-13, kant1.dat - 4 , kant2.dat - 5
m := 8                                                 ! the number of different types of small rolls 
 
declarations										   ! declare sets, arrays, constraints, and variables
	
	dRange = 1 .. m                                    ! the index range of demand
	pRange : range                                     ! the index range of patterns
	W : integer										   ! width of the large roll
	w : array(dRange) of integer                       ! widths of the small rolls
	b : array(dRange) of integer                  	   ! demands of the small rolls
		
	initialPatterns: array(dRange, pRange) of integer  ! set of initial patterns to start the column generation
	newPattern: array(dRange) of real                  ! the newly generated pattern by the knapsack problem
	numPatterns: integer                               ! number of patterns in the restricted master problem
	Z : real 			                               ! knapsack objective value
	dualVar : array(dRange) of real                    ! dual variables for the demand constraints
	DemandConstr: array(dRange) of linctr              ! Demand constraints
	!DemandConstrI: array(dRange) of linctr              ! Demand constraints
	Waste : linctr	                               ! objective value of cutting stock restricted master problem		
	!WasteI : linctr	                               ! objective value of cutting stock restricted master problem		

	x : dynamic array(pRange) of mpvar                 ! decision variable: number of rolls cut in each pattern
	!xI : dynamic array(pRange) of mpvar                 ! decision variable: number of rolls cut in each pattern

	numRollsBasis:basis		                           ! save the basis for numRolls objective
	totalWidth:real                                    ! count the total width of each pattern
	rollsCut:integer                                   ! total rolls cut
	numrolls:real
	rollsCutL:real
	cd:real
end-declarations									   ! end declarations section


! initialization from data file
! test on different data files cs1.dat, cs2.dat, cs3.dat, and report results for each instance
!!!!!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!!!!!!!!!!

initializations from 'cs1.dat'
	W as 'W'
	w as 'w'
	b as 'b'
end-initializations

! Column generation needs to start from a subset of initial columns ir patterns
! As discussed in class, you can easily find a subset of m initial patterns which generates a basic feasible solution
! Choose the subset of initial patterns and save them in the array initialPatterns
!!!!!!!!!!!!!!!!!! Write your code here !!!!!!!!!!!!!!!!!!!!!!!!!!!
forall (j in dRange) do
	forall(i in dRange) do
	if (j = i) then
	initialPatterns(j,i) := 1
	else initialPatterns(j,i) := 0
	end-if
	end-do
end-do

! set the number of initial patterns  
! this number will need to be updated everytime a new pattern is generated
numPatterns := m	

! create the corresponding x variables and set the nonnegativity constraints
!!!!!!!!!!!!!!!!! Write your code here !!!!!!!!!!!!!!!!!!!!!!!!!!
forall (j in 1..m) do
	create(x(j))
	!x(j) >= 0
	! Since initial patterns are of only one type of cut, the number of rolls with those patterns 
	! cannot be more than total demand/cuts per pattern rounded to the higher integer
	!if (initialPatterns(j,j) <>0) then
	x(j) <= integer(ceil(b(j)/initialPatterns(j,j)))
	!else x(j) <= 0
	!end-if
end-do

! Create demand constraints using the initialPatterns and the variables x created above. 
! These constraints need to be named DemandConstr(i) because we'll need to get their shadow prices (i.e. dual variables) later, 
! and for us to be able to ask Xpress for shadow prices we need a way to refer to the constraints.
!!!!!!!!!!!!!!!!!!! Write your code here !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
forall (j in dRange) do
	!DemandConstrn(j) := sum(i in 1..numPatterns) x(i)*initialPatterns(j,i) - b(j)>=0.000000000001
	DemandConstr(j) := sum(i in 1..m) x(i)*initialPatterns(j,i) = b(j)
end-do
		
! Create objective function. The objective needs to be named numRolls
! Just like the demand constraints, we'll need to add variables to it as they get generated.
!!!!!!!!!!!!!!!!!! Write your code here !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
cd:=10^(0)
Waste := (sum(i in 1..m) x(i)*((W - (sum(j in 1..m) initialPatterns(j,i)*w(j)))))*cd

!!!!!!!!!!!! Begin column generation !!!!!!!!!!!!!!!!!!
defcut:=getparam("XPRS_CUTSTRATEGY") ! Save setting of ‘CUTSTRATEGY’ 
!setparam("XPRS_CUTSTRATEGY", 0) ! Disable automatic cuts 
!setparam("XPRS_PRESOLVE", 0) ! Switch presolve off 

repeat	
	
	! Solve the problem using the variables that have been generated so far
	! Notice: we may need to use the XPRS_LIN parameter in the minimize command
	! this is to make sure we do not take into accotn any of the global constraints 
	minimize(XPRS_LIN,Waste)
	
	! Print the objective value and the solution x
	writeln("Waste = ", getobjval)
	forall (j in 1..numPatterns)
		writeln("x(",j,")=",getsol(x(j)))
				
	! Get the dual varialbes (shadow prices) 
	!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!
	forall (j in dRange) do
		dualVar(j) := getdual(DemandConstr(j))
	end-do

	! Call the knapsack function, set Z to be the knapsack objective value
	! for example: Z=knapsack(y,W,z), but you need to figure out what y is.
	!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!
		
	! hide the demands constraints before calling knapsack, so they are not used 
	! in knapsack optimization problem
	
	forall (j in dRange) do
		sethidden(DemandConstr(j),true)
	end-do
	
	
	Z := knapsack(dualVar,W,w)	

	!unhide the constraints
	forall (j in dRange) do
		sethidden(DemandConstr(j),false)
	end-do
	
	!forall (j in dRange) do
	!	dualVar(j) := getdual(DemandConstr(j))
	!	write(getdual(DemandConstr(j))," ,")
	!end-do


	! If the reduced cost is less than zero
	if  Z<= -0.000001 then
		
		! Print out the new pattern found by knapsack problem
		!!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!!
		write("New Pattern :")
		forall (j in dRange) do
			write(newPattern(j)," ,")
		end-do
		writeln("")		
		
		!	update the number of patterns generated
		! 	create the new variable
		!	update the constraints for each demand by adding the new pattern generated by knapsack
		!	update the objective function by adding the new pattern
		!!!!!!!!!!!!!!! write your code here  !!!!!!!!!!!!!!
		numPatterns += 1
		
		create(x(numPatterns))
		
		Waste += (x(numPatterns)*((W - (sum(j in 1..m) newPattern(j)*w(j)))))*cd
		!xMax := 0
		forall (j in dRange) do
			!if (newPattern(j) > 0) then
				DemandConstr(j) +=  x(numPatterns)*newPattern(j)
				!xMax := maxlist(xMax,ceil(b(j)/newPattern(j)))
			!end-if
		end-do
			
		!x(numPatterns) <= xMax
		
	end-if
	
until Z >= -0.000001	! continue until no variable has a good reduced cost
!setparam("XPRS_CUTSTRATEGY", defcut) ! Enable automatic cuts 
!setparam("XPRS_PRESOLVE", 1) ! Switch presolve on

!!!!!!!!!!!! End column generation !!!!!!!!!!!!!!!!!!

! optimize again with optimum patterns to get the context to the numRolls objectce
minimize(Waste)

writeln("\n===============\n")
! Print a summary of the final LP solution: selected patterns, number of rolls cut using each selected pattern, total number of rolls
!!!!!!!!!!! wrtie your code here !!!!!!!!!!!!!!!!!!

! print the coefficients of constraints, showing the patterns picked
writeln("LP Solution")
writeln("========================")
rollsCutL := 0
writeln("Waste is = ",getobjval)
writeln("")
writeln("The number and types of Patterns to be cut");
writeln("")
forall (i in 1..numPatterns) do	
	totalWidth := 0
	if ( getsol(x(i)) > 0 ) then
		rollsCutL += (getsol(x(i)))
		write("x(",i,")=",getsol(x(i)))
		write(" of : [")
		forall(j in 1..m) do
			r := getcoeff(DemandConstr(j) ,x(i) )
			write(w(j),":",r,",")
			totalWidth+= w(j)*r			
		end-do	
		write("]")
		writeln(", Total Width = ",totalWidth)
	end-if
	
end-do
writeln("")
writeln("Number of rolls to be used is = ",rollsCutL)
writeln("")




! We also want to get integer solutions. There are at least two approaches to do this. 
! The first approach is to round up the LP solution.
! The second approach is to re-solve the master problem as an integer program using all the generated patterns 


!!!!!!!!!!!!!!!!!!! ROUNDING LP SOLUTION !!!!!!!!!!!!!!!!!!!!!!!!!
! Implement the first approach: rounding the LP solution and print out a summary ofthe solution: 
! number of rolls cut using each selected pattern, total number of rolls
!!!!!!!!!!!!!!!!!!! Write your code here !!!!!!!!!!!!!!!!!!!!!!!!!
! print the coefficients of constraints, showing the patterns picked
writeln("\n===============\n")
writeln("Rounded LP Solution")
writeln("========================")
rollsCut := 0
writeln("The number and types of Patterns to be cut");
writeln("")
forall (i in 1..numPatterns) do	
	totalWidth := 0
	if ( getsol(x(i)) > 0 ) then
		rollsCut += ceil(getsol(x(i)))
		write("x(",i,")=",ceil(getsol(x(i))))
		write(" of : [")
		forall(j in 1..m) do
			r := getcoeff(DemandConstr(j) ,x(i) )
			write(w(j),":",r,",")
			totalWidth+= w(j)*r			
		end-do	
		write("]")
		writeln(", Total Width = ",totalWidth)
	end-if
	
end-do
writeln("")
writeln("Number of rolls to be used is = ",rollsCut)
writeln("")




!!!!!!!!!!!!!!!!!!! INTEGER SOLUTION !!!!!!!!!!!!!!!!!!!!!!!!!
! Implement the second approach: first, constrain all variables to be integer (example: x(j) is_integer), 
! then solve the master problem using all generated patterns
! You also need to print out a summary of the solution: number of rolls cut using each selected pattern, 
! total number of rolls
!!!!!!!!!!!!!!!!!!! Write your code here !!!!!!!!!!!!!!!!!!!!!!!!!
!delcell(x)
!numPatterns:=m
! set the constraints as linear 
forall (j in 1..numPatterns) do
	x(j) is_integer
end-do


minimize(Waste)





!
writeln("\n===============\n")
! Print a summary of the final LP solution: selected patterns, number of rolls cut using each selected pattern, total number of rolls
!!!!!!!!!!! wrtie your code here !!!!!!!!!!!!!!!!!!

! print the coefficients of constraints, showing the patterns picked
writeln("Integer Solution")
writeln("========================")
writeln("Waste is = ",getobjval)
writeln("")
writeln("The number and types of Patterns to be cut");
writeln("")
numrolls:=0

forall (i in 1..numPatterns) do	
	totalWidth := 0
	numrolls+=getsol(x(i))
	if ( getsol(x(i)) > 0 ) then
		write("x(",i,")=",getsol(x(i)))
		write(" of : [")
		forall(j in 1..m) do
			r := getcoeff(DemandConstr(j) ,x(i) )
			write(w(j),":",r,",")
			totalWidth+= w(j)*r			
		end-do	
		write("]")
		writeln(", Total Width = ",totalWidth)
	end-if
	
end-do

write("Total no. of num Rolls = ",numrolls)
	


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!! Knapsack Problem !!!!!!!!!!!!!!!!!!!!!!
!! implement a function that solves the knapsack problem   !!
!! Inputs: objective coefficient array y                   !!   
!!         width of the large roll W                       !!
!!         widths of the small rolls array w               !!
!! Return: optimal objective function value                !!  
!!         optimal solution (i.e. the new pattern)         !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
function knapsack(y: array(range) of real, W: integer, w: array(range) of integer) : real

	! declare decision variable
	! form constraints and objective
	! do not forget the integrality constraints on the variables
	! solve the problem
	!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!
	declarations

		k:array(1..m) of mpvar   ! the optimum solution for the new pattern
		knapcnstr:linctr  ! knapsack constraint that the total width of cuts < width of troll
		knapobj:linctr    ! knapsack objective of maximizing c_B B^-1 A_j to get new pattern
		
	end-declarations
	cd:=10^(0)
	! select pattern that maximizes  c_B B^-1 A_j to get new pattern
	knapobj := W*cd-(sum(j in 1..m) y(j)*k(j)+sum(j in 1..m) (k(j)*w(j)*cd))
		
	! knapsack constraint that the total width of cuts < width of troll
	knapcnstr := sum(j in 1..m) w(j)*k(j) <= W 
	
	! since we define number of cuts of each width in the pattern, it needs to be a integer
	forall (j in 1..m)
		k(j) is_integer
		
	! perform the optimization
	minimize(knapobj)
	writeln("reduced cost = ",getobjval)	
	! return the optimal objective value
	! the keyword returned is reserved for this purpose by Xpress
	returned := getobjval
	forall (j in 1 ..m) do
	write((y(j))," ,")
	!write(getsol(k(j))," ,")
	end-do
	! return the optimal solution, save it in the array newPattern defined in the beginning of this model file
	!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!
	forall ( j in 1..m) do
			newPattern(j) := getsol(k(j))	
				
	end-do
	
	! erase the knapsack constraints before returning, so they are not used
	! in demand optimization
	knapobj := 0
	knapcnstr := 0
		
end-function

end-model